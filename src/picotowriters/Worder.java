package picotowriters;

import com.lowagie.text.PageSize;
import com.lowagie.text.pdf.DefaultFontMapper;
import com.lowagie.text.pdf.PdfContentByte;
import com.lowagie.text.pdf.PdfWriter;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.GraphicsEnvironment;
import java.awt.Insets;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.event.ActionEvent;
import java.awt.Rectangle;
import java.awt.geom.AffineTransform;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringWriter;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.ImageIcon;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.KeyStroke;
import javax.swing.TransferHandler;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.Element;
import javax.swing.text.MutableAttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import javax.swing.undo.CannotUndoException;
import javax.swing.undo.UndoManager;
import javax.swing.text.html.HTMLEditorKit;
import javax.swing.text.rtf.RTFEditorKit;

/**
 *
 * @author Pablo
 */
public class Worder extends javax.swing.JFrame {

    boolean es_negrita = false;
    boolean es_cursiva = false;
    int estilo_seleccionado;
    String fuente_seleccionada;
    int tamaño_seleccionado;
    Color color_seleccionado;
    SimpleAttributeSet attributeSet = new SimpleAttributeSet();
    String fontNames[];
    int inch = Toolkit.getDefaultToolkit().getScreenResolution();

    float pixelToPoint = (float) 72 / (float) inch;

    /**
     * Creates new form Worder
     */
    public Worder() {

        //Inicializar componentes del programa
        initComponents();

        //Variables de memoria de edición
        cargarFuentesComboBox();

        //Inicializamos el UndoManager el cual será quien nos permita deshacer y rehacer cambios
        undo = new UndoManager();

        //Rellenamos el comboBox de los tamaños
        for (int i = 8; i < 80; i++) {
            jComboBoxTamanoTexto.addItem(String.valueOf(i));
        }
        fuente_seleccionada = "Arial";
        tamaño_seleccionado = 14;
        estilo_seleccionado = Font.PLAIN;
        //Recargo inicialmente que mostrar en los jComboBox
        jComboBoxFont.setSelectedItem(String.valueOf(fuente_seleccionada));
        jComboBoxTamanoTexto.setSelectedItem(String.valueOf(tamaño_seleccionado));

        jTextPane1.setFont(new Font(fuente_seleccionada, estilo_seleccionado, tamaño_seleccionado));
        //Utilizo una fuente inicial
        //Pongo en marcha el UndoManager
        addUndoManager(undo, jTextPane1);
    }

    public Worder(JTextPane panelTexto, String fuente_a_coger) {
        this.fuente_seleccionada = fuente_a_coger;
        this.jTextPane1 = panelTexto;

        jComboBoxFont = new JComboBox();
        cargarFuentesComboBox();
        jComboBoxFont.setSelectedItem(String.valueOf(fuente_seleccionada));

        StyleConstants.setFontFamily(attributeSet, fuente_seleccionada);
        jTextPane1.setCharacterAttributes(attributeSet, true);
    }

    void cargarFuentesComboBox() {
        //Array de las fuentes
        fontNames = GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
        //Rellenamos el comboBox de las fuentes
        for (String font : fontNames) {
            jComboBoxFont.addItem(font);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem3 = new javax.swing.JMenuItem();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jRadioButtonNegrita = new javax.swing.JRadioButton();
        jRadioButtonCursiva = new javax.swing.JRadioButton();
        jComboBoxFont = new javax.swing.JComboBox<>();
        jComboBoxTamanoTexto = new javax.swing.JComboBox<>();
        jButtonUndo = new javax.swing.JButton();
        jButtonRedo = new javax.swing.JButton();
        jButtonGuardar = new javax.swing.JButton();
        jButtonNuevo = new javax.swing.JButton();
        jButtonImprimir = new javax.swing.JButton();
        jButtonOpen = new javax.swing.JButton();
        jButtonHTML = new javax.swing.JButton();
        jButtonAyuda = new javax.swing.JButton();
        jButtonColor = new javax.swing.JButton();
        jButtonCuboColor = new javax.swing.JButton();
        jRadioButtonTachado = new javax.swing.JRadioButton();
        jSliderTamanoTexto = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButtonBuscar = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemNuevo = new javax.swing.JMenuItem();
        jSeparator10 = new javax.swing.JPopupMenu.Separator();
        jMenuItemAbrir = new javax.swing.JMenuItem();
        jMenuItemGuardar = new javax.swing.JMenuItem();
        jSeparator9 = new javax.swing.JPopupMenu.Separator();
        jMenuItemImprimir = new javax.swing.JMenuItem();
        jMenuItemPDF = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        jMenuItemHTML = new javax.swing.JMenuItem();
        jMenuItemRTF = new javax.swing.JMenuItem();
        jSeparator8 = new javax.swing.JPopupMenu.Separator();
        jMenuItemSalir = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItemCopy = new javax.swing.JMenuItem();
        jMenuItemSelectAll = new javax.swing.JMenuItem();
        jMenuItemCut = new javax.swing.JMenuItem();
        jMenuItemPaste = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItemUndo = new javax.swing.JMenuItem();
        jMenuItemRedo = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        jMenuItemBuscar = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        jMenuItemAlignCenter = new javax.swing.JMenuItem();
        jMenuItemAlignIzq = new javax.swing.JMenuItem();
        jMenuItemAlignDer = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItemNegrita = new javax.swing.JMenuItem();
        jMenuItemCursi = new javax.swing.JMenuItem();
        jMenuItemTacha = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jCheckBoxMenuItemPlain = new javax.swing.JCheckBoxMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItemSize = new javax.swing.JMenuItem();
        jMenuItemTextColor = new javax.swing.JMenuItem();
        jMenuItemBackgroundColor = new javax.swing.JMenuItem();
        jMenuExtras = new javax.swing.JMenu();
        jMenuItemExtra = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuTemasAyuda = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jMenuItemAyuda = new javax.swing.JMenuItem();

        jMenuItem3.setText("jMenuItem3");

        jPopupMenu1.setComponentPopupMenu(jPopupMenu1);
        jPopupMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPopupMenu1MouseClicked(evt);
            }
        });

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Picoto Writer 1.1");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jScrollPane1.setViewportView(jTextPane1);

        jRadioButtonNegrita.setText("Negrita");
        jRadioButtonNegrita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonNegritaActionPerformed(evt);
            }
        });

        jRadioButtonCursiva.setText("Cursiva");
        jRadioButtonCursiva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonCursivaActionPerformed(evt);
            }
        });

        jComboBoxFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFontActionPerformed(evt);
            }
        });

        jComboBoxTamanoTexto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTamanoTextoActionPerformed(evt);
            }
        });

        jButtonUndo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picotowriters/icons/icon_undo.png"))); // NOI18N
        jButtonUndo.setToolTipText("");
        jButtonUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUndoActionPerformed(evt);
            }
        });

        jButtonRedo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picotowriters/icons/icon_redo.png"))); // NOI18N
        jButtonRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRedoActionPerformed(evt);
            }
        });

        jButtonGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picotowriters/icons/icon_save.png"))); // NOI18N
        jButtonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarActionPerformed(evt);
            }
        });

        jButtonNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picotowriters/icons/icon_new.png"))); // NOI18N
        jButtonNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNuevoActionPerformed(evt);
            }
        });

        jButtonImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picotowriters/icons/icon_print.png"))); // NOI18N
        jButtonImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImprimirActionPerformed(evt);
            }
        });

        jButtonOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picotowriters/icons/icon_open.png"))); // NOI18N
        jButtonOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOpenActionPerformed(evt);
            }
        });

        jButtonHTML.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picotowriters/icons/icon_web.png"))); // NOI18N
        jButtonHTML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHTMLActionPerformed(evt);
            }
        });

        jButtonAyuda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picotowriters/icons/icon_help.png"))); // NOI18N
        jButtonAyuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAyudaActionPerformed(evt);
            }
        });

        jButtonColor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picotowriters/icons/icon_color.png"))); // NOI18N
        jButtonColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonColorActionPerformed(evt);
            }
        });

        jButtonCuboColor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picotowriters/icons/icon_refill.png"))); // NOI18N
        jButtonCuboColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCuboColorActionPerformed(evt);
            }
        });

        jRadioButtonTachado.setText("Tachado");
        jRadioButtonTachado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonTachadoActionPerformed(evt);
            }
        });

        jSliderTamanoTexto.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderTamanoTextoStateChanged(evt);
            }
        });

        jLabel1.setText("0");

        jLabel2.setText("100");

        jButtonBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picotowriters/icons/icon_find.png"))); // NOI18N
        jButtonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarActionPerformed(evt);
            }
        });

        jMenu1.setText("Archivo");

        jMenuItemNuevo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.ALT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemNuevo.setText("Nuevo documento");
        jMenuItemNuevo.setToolTipText("");
        jMenuItemNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNuevoActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemNuevo);
        jMenu1.add(jSeparator10);

        jMenuItemAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemAbrir.setText("Abrir...");
        jMenuItemAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAbrirActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemAbrir);

        jMenuItemGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemGuardar.setText("Guardar como");
        jMenuItemGuardar.setToolTipText("");
        jMenuItemGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemGuardarActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemGuardar);
        jMenu1.add(jSeparator9);

        jMenuItemImprimir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemImprimir.setText("Imprimir documento");
        jMenuItemImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemImprimirActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemImprimir);

        jMenuItemPDF.setText("Exportar a PDF...");
        jMenuItemPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPDFActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemPDF);
        jMenu1.add(jSeparator7);

        jMenuItemHTML.setText("Cambiar a código HTML");
        jMenuItemHTML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemHTMLActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemHTML);

        jMenuItemRTF.setText("Regresar a código RTF");
        jMenuItemRTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRTFActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemRTF);
        jMenu1.add(jSeparator8);

        jMenuItemSalir.setText("Salir");
        jMenuItemSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSalirActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemSalir);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edición");

        jMenuItemCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemCopy.setText("Copiar");
        jMenuItemCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCopyActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemCopy);

        jMenuItemSelectAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemSelectAll.setText("Seleccionar todo");
        jMenuItemSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSelectAllActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemSelectAll);

        jMenuItemCut.setText("Cortar");
        jMenuItemCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCutActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemCut);

        jMenuItemPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemPaste.setText("Pegar");
        jMenuItemPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPasteActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemPaste);
        jMenu2.add(jSeparator3);

        jMenuItemUndo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemUndo.setText("Deshacer");
        jMenuItemUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemUndoActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemUndo);

        jMenuItemRedo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemRedo.setText("Rehacer");
        jMenuItemRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRedoActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemRedo);
        jMenu2.add(jSeparator5);

        jMenuItemBuscar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemBuscar.setText("Buscar texto...");
        jMenuItemBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemBuscarActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemBuscar);
        jMenu2.add(jSeparator6);

        jMenuItemAlignCenter.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.SHIFT_DOWN_MASK));
        jMenuItemAlignCenter.setText("Alinear texto al centro");
        jMenuItemAlignCenter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAlignCenterActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemAlignCenter);

        jMenuItemAlignIzq.setText("Alinear texto a la izquierda");
        jMenuItemAlignIzq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAlignIzqActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemAlignIzq);

        jMenuItemAlignDer.setText("Alinear texto a la derecha");
        jMenuItemAlignDer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAlignDerActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemAlignDer);

        jMenuBar1.add(jMenu2);

        jMenu4.setText("Formato");

        jMenuItemNegrita.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemNegrita.setText("En negrita");
        jMenuItemNegrita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNegritaActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItemNegrita);

        jMenuItemCursi.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_K, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemCursi.setText("En cursiva");
        jMenuItemCursi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCursiActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItemCursi);

        jMenuItemTacha.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemTacha.setText("En tachado");
        jMenuItemTacha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemTachaActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItemTacha);
        jMenu4.add(jSeparator1);

        jCheckBoxMenuItemPlain.setText("Pasar todo a texto plano");
        jCheckBoxMenuItemPlain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemPlainActionPerformed(evt);
            }
        });
        jMenu4.add(jCheckBoxMenuItemPlain);
        jMenu4.add(jSeparator2);

        jMenuItemSize.setText("Seleccionar tamaño");
        jMenuItemSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSizeActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItemSize);

        jMenuItemTextColor.setText("Seleccionar color del texto");
        jMenuItemTextColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemTextColorActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItemTextColor);

        jMenuItemBackgroundColor.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.ALT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemBackgroundColor.setText("Seleccionar color del fondo");
        jMenuItemBackgroundColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemBackgroundColorActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItemBackgroundColor);

        jMenuBar1.add(jMenu4);

        jMenuExtras.setText("Extras");

        jMenuItemExtra.setText("Abrir el transcriptor de archivos");
        jMenuItemExtra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExtraActionPerformed(evt);
            }
        });
        jMenuExtras.add(jMenuItemExtra);

        jMenuBar1.add(jMenuExtras);

        jMenu3.setText("Ayuda");

        jMenuTemasAyuda.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMenuTemasAyuda.setText("Temas de ayuda...");
        jMenuTemasAyuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuTemasAyudaActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuTemasAyuda);
        jMenu3.add(jSeparator4);

        jMenuItemAyuda.setText("Acerca de");
        jMenuItemAyuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAyudaActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItemAyuda);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jComboBoxFont, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxTamanoTexto, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonNuevo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonOpen)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonGuardar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonImprimir)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonHTML)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonBuscar)
                                .addGap(4, 4, 4)
                                .addComponent(jButtonAyuda)))
                        .addGap(79, 79, 79)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonNegrita)
                            .addComponent(jRadioButtonCursiva)
                            .addComponent(jRadioButtonTachado))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonUndo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonRedo, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonColor, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonCuboColor, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSliderTamanoTexto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)))
                        .addGap(0, 38, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonNuevo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonImprimir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonOpen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonHTML, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonAyuda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonUndo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonRedo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonColor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jRadioButtonTachado)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jRadioButtonNegrita))
                    .addComponent(jButtonCuboColor, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jButtonBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jComboBoxFont, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxTamanoTexto, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jRadioButtonCursiva, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addComponent(jSliderTamanoTexto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 581, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void addUndoManager(UndoManager um, javax.swing.JTextPane huha) {
        Document doc = jTextPane1.getDocument();

        doc.addUndoableEditListener(new UndoableEditListener() {
            @Override
            public void undoableEditHappened(UndoableEditEvent evt) {
                undo.addEdit(evt.getEdit());
            }
        });

        jTextPane1.getActionMap().put("Undo", new AbstractAction("Undo") {
            @Override
            public void actionPerformed(ActionEvent evt) {
                try {
                    if (undo.canUndo()) {
                        undo.undo();
                    }
                } catch (CannotUndoException e) {
                }
            }
        });
        jTextPane1.getInputMap().put(KeyStroke.getKeyStroke("control Z"), "Undo");

        jTextPane1.getActionMap().put("Redo", new AbstractAction("Redo") {
            @Override
            public void actionPerformed(ActionEvent evt) {
                try {
                    if (undo.canRedo()) {
                        undo.redo();
                    }
                } catch (CannotUndoException e) {
                }
            }
        });

        // Asignamos Control + Z
        jTextPane1.getInputMap().put(KeyStroke.getKeyStroke("control Y"), "Redo");
    }

    public void leerDocumento() {
        MyFileFilterTXT filterTXT = new MyFileFilterTXT();
        MyFileFilterRTF filterRTF = new MyFileFilterRTF();

        //Ahora creamos un selector que nos decidirá en que extensión guardar
        JFileChooser selector = new JFileChooser();
        selector.setMultiSelectionEnabled(true);

        //Removemos el "All Files" del recuadro
        selector.setAcceptAllFileFilterUsed(false);

        //Añadimos las extensiones en las que guardará
        selector.addChoosableFileFilter(filterTXT);
        selector.addChoosableFileFilter(filterRTF);

        //Si damos a "Guardar" se cerrará la ventana
        selector.setApproveButtonText("Abrir");

        int returnVal = selector.showOpenDialog(this);
        if (returnVal != JFileChooser.APPROVE_OPTION) {
            return;
        }

        //Empiezo colocando el BufferedReader a null
        BufferedReader archivo_entrada = null;
        try {
            //Si leo en TXT
            if (selector.getFileFilter() == filterTXT) {
                selector.setApproveButtonText("Abrir");
                File archivo = selector.getSelectedFile();
                if (!archivo.getName().endsWith(".txt")) {
                    //Hacemos que abra con el nombre del archivo más la extensión
                    archivo = new File(archivo.getAbsolutePath() + ".txt");
                }
                //Asocio el archivo al FileReader y ya queda cargado el Buffer
                archivo_entrada = new BufferedReader(new FileReader(archivo));
                jTextPane1.read(archivo_entrada, this);

            } else if (selector.getFileFilter() == filterRTF) {

                //Si leo en RTF
                File archivo = selector.getSelectedFile();
                if (!archivo.getName().endsWith(".rtf")) {
                    archivo = new File(archivo.getAbsolutePath() + ".rtf");
                }

                HTMLEditorKit kit = new HTMLEditorKit();
                jTextPane1.setEditorKit(kit);

                BufferedInputStream in;

                try {
                    in = new BufferedInputStream(new FileInputStream(archivo));
                    kit.read(in, jTextPane1.getDocument(), 0);

                } catch (FileNotFoundException e) {

                } catch (IOException e) {

                } catch (BadLocationException e) {

                }
            } else {
                JOptionPane.showMessageDialog(null, "Debe de elegir una extensión para el archivo");
                //Volvemos a llamar a la ventana de abrir
                leerDocumento();

            }

        } catch (IOException e) {
        } finally {
            if (archivo_entrada != null) {
                try {
                    //Cierro el buffer
                    archivo_entrada.close();
                } catch (IOException e) {

                }
            }

        }
        //Hago el acceso de tecla para la función "Abrir"
        jTextPane1.getInputMap().put(KeyStroke.getKeyStroke("control O"), "Open");
    }

    public void guardarDocumento() {

        //Empezamos declarando las extensiones de las que dispondrá el asistente de guardado
        FileNameExtensionFilter filterTXT = new FileNameExtensionFilter("Documento de texto (.txt)", ".txt");
        FileNameExtensionFilter filterRTF = new FileNameExtensionFilter("Documento de texto enriquecido (.rtf)", ".rtf");
        FileNameExtensionFilter filterHTML = new FileNameExtensionFilter("Página web (.html)", ".html");

        //Ahora creamos un selector que nos decidirá en que extensión guardar
        JFileChooser selector = new JFileChooser();
        selector.setMultiSelectionEnabled(true);

        //Removemos el "All Files" del recuadro
        selector.setAcceptAllFileFilterUsed(false);

        //Añadimos las extensiones en las que guardará
        selector.addChoosableFileFilter(filterTXT);
        selector.addChoosableFileFilter(filterRTF);
        selector.addChoosableFileFilter(filterHTML);

        //Si damos a "Guardar" se cerrará la ventana
        selector.setApproveButtonText("Guardar");

        int returnVal = selector.showSaveDialog(this);
        if (returnVal != JFileChooser.APPROVE_OPTION) {
            return;
        }

        //Empiezo colocando el BufferedWriter a null
        BufferedWriter archivo_salida = null;
        try {
            //Si guardo en TXT
            if (selector.getFileFilter() == filterTXT) {
                selector.setApproveButtonText("Guardar");
                File archivo = selector.getSelectedFile();
                if (!archivo.getName().endsWith(".txt")) {
                    //Hacemos que guarde con el nombre del archivo más la extensión
                    archivo = new File(archivo.getAbsolutePath() + ".txt");
                }
                //Asocio el archivo al FileWriter y ya queda cargado el Buffer
                archivo_salida = new BufferedWriter(new FileWriter(archivo));
                //Traspaso el texto del jTextPane1 mediante el buffer al archivo
                jTextPane1.write(archivo_salida);
            } else if (selector.getFileFilter() == filterRTF) {
                //Si guardo en RTF
                File archivo = selector.getSelectedFile();
                if (!archivo.getName().endsWith(".rtf")) {
                    archivo = new File(archivo.getAbsolutePath() + ".rtf");
                }

                StyledDocument doc = (StyledDocument) jTextPane1.getDocument();
                HTMLEditorKit kit = new HTMLEditorKit();

                BufferedOutputStream out;

                try {
                    out = new BufferedOutputStream(new FileOutputStream(selector.getSelectedFile().getAbsoluteFile() + ".rtf"));

                    kit.write(out, doc, doc.getStartPosition().getOffset(), doc.getLength());

                } catch (FileNotFoundException e) {

                } catch (IOException e) {

                } catch (BadLocationException e) {

                }
            } else if (selector.getFileFilter() == filterHTML) {
                File archivo = selector.getSelectedFile();

                if (!archivo.getName().endsWith(".html")) {
                    //Hacemos que guarde con el nombre del archivo más la extensión
                    archivo = new File(archivo.getAbsolutePath() + ".html");
                }

                //Se crea el contenido HTML a partir del archivo, se le pasa el documento por el constructor
                StyledDocument doc = (StyledDocument) jTextPane1.getDocument();
                HTMLWriter pagina_nueva = new HTMLWriter(doc);

                //Se obtiene el HTML creado
                String contenidoHTML = pagina_nueva.getHTML();

                //Asocio el archivo al FileWriter y ya queda cargado el Buffer
                try ( FileOutputStream fos = new FileOutputStream(archivo);  BufferedOutputStream bos = new BufferedOutputStream(fos)) {
                    //convert string to byte array
                    byte[] bytes = contenidoHTML.getBytes();
                    //write byte array to file
                    bos.write(bytes);
                    bos.close();
                    fos.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }

            } else {
                JOptionPane.showMessageDialog(null, "Debe de elegir una extensión para el archivo");
                //Volvemos a llamar a la ventana de guardar
                guardarDocumento();

            }

        } catch (IOException e) {
        } finally {
            if (archivo_salida != null) {
                try {
                    //Cierro el buffer
                    archivo_salida.close();
                } catch (IOException e) {

                }
            }

        }
        //Hago el acceso de tecla para la función "Guardar como..."
        jTextPane1.getInputMap().put(KeyStroke.getKeyStroke("control S"), "Save");
    }

    public float convertToPoints(int pixels) {
        return (float) (pixels * pixelToPoint);
    }

    public float convertToPixels(int points) {
        return (float) (points / pixelToPoint);
    }

    protected Rectangle getVisibleEditorRect(JTextPane texto_a_maquetar) {
    Rectangle alloc = texto_a_maquetar.getBounds();
    
    if ((alloc.width > 0) && (alloc.height > 0)) {
      alloc.x = alloc.y = 0;
      Insets insets = texto_a_maquetar.getInsets();
      alloc.x += insets.left;
      alloc.y += insets.top;
      alloc.width -= insets.left + insets.right;
      alloc.height -= insets.top + insets.bottom;
      return alloc;
    }
    return null;
  }

    public void exportarAPDF() {
        final JFileChooser selector = new JFileChooser();
        
        //Para luego abrir el archivo...
        Desktop desktop = java.awt.Desktop.getDesktop();
        
        selector.setApproveButtonText("Guardar");
        MyFileFilterPDF filtro_pdf = new MyFileFilterPDF();
        selector.setFileFilter(filtro_pdf);
        selector.addChoosableFileFilter(filtro_pdf);

        int returnVal = selector.showSaveDialog(this);
        if (returnVal != JFileChooser.APPROVE_OPTION) {
            return;
        }

        File archivo = selector.getSelectedFile();
        if (!archivo.getName().endsWith(".pdf")) {
            archivo = new File(archivo.getAbsolutePath() + ".pdf");
        }

        //Inicializamos el documento
        com.lowagie.text.Document documento;
        try {
            documento = new com.lowagie.text.Document(PageSize.A4);
            PdfWriter escritor = PdfWriter.getInstance(documento, new FileOutputStream(archivo));
            
            documento.setPageSize(new com.lowagie.text.Rectangle(612, 792));
            
            //Abrimos el documento para empezar a maquetarlo
            documento.open();
            PdfContentByte cb = escritor.getDirectContent();
            cb.saveState();
            cb.concatCTM(1, 0, 0, 1, 0, 0);

            DefaultFontMapper mapper = new DefaultFontMapper();
            
            //Directorio de fuentes para el mapeador
            mapper.insertDirectory("c:/windows/fonts");

            Graphics2D g2 = cb.createGraphics(612, 792, mapper, true, .95f);

            AffineTransform at = new AffineTransform();
            at.translate(convertToPixels(20), convertToPixels(20));
            at.scale(pixelToPoint, pixelToPoint);

            g2.transform(at);

            g2.setColor(Color.WHITE);
            g2.fill(jTextPane1.getBounds());

            Rectangle alloc = getVisibleEditorRect(jTextPane1);
            jTextPane1.getUI().getRootView(jTextPane1).paint(g2, alloc);
            g2.setColor(Color.BLACK);
            g2.draw(jTextPane1.getBounds());

            g2.dispose();
            cb.restoreState();
            documento.close();
            try {
                //Despues abrimos el archivo creado
                desktop.open(archivo);
            } catch (IOException ex) {
                Logger.getLogger(Worder.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    void buscarTexto() {
        int selectionEnd = jTextPane1.getSelectionEnd();
        int selectionStart = jTextPane1.getSelectionStart();
        if (selectionStart == selectionEnd) { //Si no hay nada seleccionado mando mensaje
            JOptionPane.showMessageDialog(null, "Seleccione texto para buscar, por favor");
        } else { //Si seleccioné algo...
            String url = "https://www.google.com/search?q=" + jTextPane1.getSelectedText().replace(" ", "+");
            Desktop desktop = java.awt.Desktop.getDesktop();
            try {
                desktop.browse(new URI(url));
            } catch (URISyntaxException ex) {
                Logger.getLogger(Worder.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Worder.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }


    private void jRadioButtonCursivaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonCursivaActionPerformed
        // TODO add your handling code here:
        StyledDocument doc = (StyledDocument) jTextPane1.getDocument();

        if (es_cursiva == false) {

            //Defino el inicio y final de la selección
            int selectionEnd = jTextPane1.getSelectionEnd();
            int selectionStart = jTextPane1.getSelectionStart();
            if (selectionStart == selectionEnd) {   //Si no hay selección, la distancia es 0 entre start y end
                StyleConstants.setForeground(attributeSet, color_seleccionado);
                if (es_negrita == true) {
                    //Si negrita ya está activada mezclo los dos estilos
                    StyleConstants.setItalic(attributeSet, true);
                    StyleConstants.setBold(attributeSet, true);
                    jTextPane1.setCharacterAttributes(attributeSet, true);
                } else if (es_negrita == false) {   //Si no hay negrita aplico sólo cursiva
                    StyleConstants.setItalic(attributeSet, true);
                    jTextPane1.setCharacterAttributes(attributeSet, true);
                }
            } else {
                Element element = doc.getCharacterElement(selectionStart);
                //Cojo los atributos del elemento y los defino en un AttributeSet
                AttributeSet as = element.getAttributes();
                //Ahora creo un MutableAttributeSet copiando atributos del AttributeSet (extiende de esta)
                MutableAttributeSet asNew = new SimpleAttributeSet(as.copyAttributes());
                StyleConstants.setItalic(asNew, !StyleConstants.isItalic(as));
                //Aplico atributos desde el inicio hasta el final de la selección ("jTextPane1.getSelectedText().length() ")
                doc.setCharacterAttributes(selectionStart, jTextPane1.getSelectedText().length(), asNew, true);
                estilo_seleccionado = doc.getFont(as).getStyle();
            }
            es_cursiva = true;
        } else if (es_cursiva == true) {
            int selectionEnd = jTextPane1.getSelectionEnd();
            int selectionStart = jTextPane1.getSelectionStart();
            if (selectionStart == selectionEnd) {
                StyleConstants.setForeground(attributeSet, color_seleccionado);
                //quito la cursiva si estoy escribiendo
                StyleConstants.setItalic(attributeSet, false);
                jTextPane1.setCharacterAttributes(attributeSet, true);

            } else {
                Element element = doc.getCharacterElement(selectionStart);
                AttributeSet as = element.getAttributes();
                MutableAttributeSet asNew = new SimpleAttributeSet(as.copyAttributes());
                StyleConstants.setItalic(asNew, !StyleConstants.isItalic(as));
                //quito la cursiva en la selección
                doc.setCharacterAttributes(selectionStart, jTextPane1.getSelectedText().length(), asNew, false);
                estilo_seleccionado = doc.getFont(as).getStyle();
            }
            es_cursiva = false;
        }
    }//GEN-LAST:event_jRadioButtonCursivaActionPerformed

    private void jRadioButtonNegritaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonNegritaActionPerformed

        StyledDocument doc = (StyledDocument) jTextPane1.getDocument();

        if (es_negrita == false) {

            //Si negrita no está aplicada la aplico
            int selectionEnd = jTextPane1.getSelectionEnd();
            int selectionStart = jTextPane1.getSelectionStart();
            if (selectionStart == selectionEnd) {   //Si no he seleccionado nada cambio a negrita
                StyleConstants.setForeground(attributeSet, color_seleccionado);
                if (es_cursiva == false) {
                    StyleConstants.setBold(attributeSet, true);
                    jTextPane1.setCharacterAttributes(attributeSet, true);
                } else if (es_cursiva == true) {    //Si ya tenía previamente antes italica mezclo los dos estilos
                    StyleConstants.setItalic(attributeSet, true);
                    StyleConstants.setBold(attributeSet, true);
                    jTextPane1.setCharacterAttributes(attributeSet, true);
                }
            } else {  //Para dar negrita a la selección
                //Recojo los atributos de los elementos desde que empieza la selección
                Element element = doc.getCharacterElement(selectionStart);
                AttributeSet as = element.getAttributes();
                MutableAttributeSet asNew = new SimpleAttributeSet(as.copyAttributes());
                StyleConstants.setBold(asNew, !StyleConstants.isBold(as));
                doc.setCharacterAttributes(selectionStart, jTextPane1.getSelectedText().length(), asNew, true);
                estilo_seleccionado = doc.getFont(as).getStyle();
            }
            es_negrita = true;
        } else if (es_negrita == true) {
            //Mediante la bandera "es_negrita" si es true significa que voy a quitarla
            int selectionEnd = jTextPane1.getSelectionEnd();
            int selectionStart = jTextPane1.getSelectionStart();
            if (selectionStart == selectionEnd) {   //Para quitar negrita sin haber seleccionado
                StyleConstants.setBold(attributeSet, false);
                StyleConstants.setForeground(attributeSet, color_seleccionado);
                jTextPane1.setCharacterAttributes(attributeSet, true);
            } else {                                //Si ya he seleccionado previamente quito negrita
                Element element = doc.getCharacterElement(selectionStart);
                AttributeSet as = element.getAttributes();
                MutableAttributeSet asNew = new SimpleAttributeSet(as.copyAttributes());
                StyleConstants.setBold(asNew, !StyleConstants.isBold(as));
                doc.setCharacterAttributes(selectionStart, jTextPane1.getSelectedText().length(), asNew, false);
                estilo_seleccionado = doc.getFont(as).getStyle();
            }
            //Actualizo la bandera al estar negrita quitada ya
            es_negrita = false;
        }
    }//GEN-LAST:event_jRadioButtonNegritaActionPerformed

    private void jComboBoxFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFontActionPerformed
        // TODO add your handling code here:
        //Coloco en una variable temporal "fuente_seleccionada" la fuente elegida de la cajita
        fuente_seleccionada = jComboBoxFont.getSelectedItem().toString();
        StyledDocument doc = (StyledDocument) jTextPane1.getDocument();
        int selectionEnd = jTextPane1.getSelectionEnd();
        int selectionStart = jTextPane1.getSelectionStart();
        if (selectionStart == selectionEnd) {       //Si voy a escribir cambio la fuente
            attributeSet = new SimpleAttributeSet();
            //Respeto la fuente, tamaño de fuente y el color de letra que había para aplicar la fuente
            StyleConstants.setFontFamily(attributeSet, fuente_seleccionada);
            StyleConstants.setFontSize(attributeSet, tamaño_seleccionado);
            StyleConstants.setForeground(attributeSet, color_seleccionado);
            //Respeto ahora los estilos con los que estoy escribiendo
            if (es_negrita == true) {
                StyleConstants.setBold(attributeSet, true);
            } else if (es_cursiva == true) {
                StyleConstants.setItalic(attributeSet, true);
            } else if (es_cursiva == true && es_negrita == true) {
                StyleConstants.setBold(attributeSet, true);
                StyleConstants.setItalic(attributeSet, true);
            }
            jTextPane1.setCharacterAttributes(attributeSet, true);
        } else {      //Para cambiar la fuente a lo seleccionado
            Element element = doc.getCharacterElement(selectionStart);
            AttributeSet as = element.getAttributes();
            MutableAttributeSet asNew = new SimpleAttributeSet(as.copyAttributes());
            //Respeto la fuente y el tamaño de cada carácter de la selección
            StyleConstants.setFontFamily(asNew, fuente_seleccionada);
            StyleConstants.setFontSize(asNew, tamaño_seleccionado);
            //Respeto los diferentes estilos de los caracteres seleccionados
            if (es_negrita == true) {
                StyleConstants.setBold(asNew, true);
            } else if (es_cursiva == true) {
                StyleConstants.setItalic(asNew, true);
            } else if (es_cursiva == true && es_negrita == true) {
                StyleConstants.setBold(asNew, true);
                StyleConstants.setItalic(asNew, true);
            }
            //Aplico la fuente a la selección
            doc.setCharacterAttributes(selectionStart, jTextPane1.getSelectedText().length(), asNew, true);
        }
    }//GEN-LAST:event_jComboBoxFontActionPerformed

    private void jComboBoxTamanoTextoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTamanoTextoActionPerformed
        // TODO add your handling code here:
        // Elijo el tamaño de la cajita y lo coloco en una variable temporal "tamaño_seleccionado"
        tamaño_seleccionado = Integer.parseInt(jComboBoxTamanoTexto.getSelectedItem().toString());
        StyledDocument doc = (StyledDocument) jTextPane1.getDocument();
        int selectionEnd = jTextPane1.getSelectionEnd();
        int selectionStart = jTextPane1.getSelectionStart();
        if (selectionStart == selectionEnd) { //Si voy a escribir cambio el tamaño
            attributeSet = new SimpleAttributeSet();
            //Respeto el color que estaba aplicado ya
            StyleConstants.setForeground(attributeSet, color_seleccionado);
            StyleConstants.setFontSize(attributeSet, tamaño_seleccionado);
            jTextPane1.setCharacterAttributes(attributeSet, true);

        } else {      //Para cambiar el tamaño de lo seleccionado

            for (int i = selectionStart; i < selectionEnd; i++) {
                Element element = doc.getCharacterElement(i);
                AttributeSet as = element.getAttributes();
                MutableAttributeSet asNew = new SimpleAttributeSet(as.copyAttributes());

                StyleConstants.setFontSize(asNew, tamaño_seleccionado);
                /* Al cambiar el tamaño de una selección tengo que respetar los estilos que estaban aplicados en cada
                carácter, de lo contrario, se pondrían todos con el último estilo aplicado */
                if (es_negrita == true) {
                    StyleConstants.setBold(asNew, true);
                } else if (es_cursiva == true) {
                    StyleConstants.setItalic(asNew, true);
                } else if (es_cursiva == true && es_negrita == true) {
                    StyleConstants.setBold(asNew, true);
                    StyleConstants.setItalic(asNew, true);
                }
                //Voy aplicando el tamaño por cada caracter
                doc.setCharacterAttributes(i, 1, asNew, true);
            }
        }
    }//GEN-LAST:event_jComboBoxTamanoTextoActionPerformed

    private void jButtonUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUndoActionPerformed
        // TODO add your handling code here:
        //Función deshacer (mediante UndoManager)
        try {
            if (undo.canUndo()) {
                undo.undo();
            }
        } catch (CannotUndoException e) {
        }
    }//GEN-LAST:event_jButtonUndoActionPerformed

    private void jButtonRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRedoActionPerformed
        // TODO add your handling code here:
        //Función rehacer (mediante UndoManager)
        try {
            if (undo.canRedo()) {
                undo.redo();
            }
        } catch (CannotUndoException e) {
        }
    }//GEN-LAST:event_jButtonRedoActionPerformed

    private void jMenuItemTextColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemTextColorActionPerformed
        // TODO add your handling code here:
        StyledDocument doc = (StyledDocument) jTextPane1.getDocument();
        int selectionEnd = jTextPane1.getSelectionEnd();
        int selectionStart = jTextPane1.getSelectionStart();
        if (selectionStart == selectionEnd) {  //Si no seleccionamos nada cambiamos el color de todo el jTextPane
            Color color = JColorChooser.showDialog(rootPane, "Cambiar color de la letra", Color.yellow);
            Element element = doc.getCharacterElement(0);
            color_seleccionado = color;
            AttributeSet as = element.getAttributes();
            MutableAttributeSet asNew = new SimpleAttributeSet(as.copyAttributes());
            StyleConstants.setForeground(asNew, color);
            jTextPane1.setCharacterAttributes(asNew, true);

        } else {          //Si ya hemos hecho una selección
            Color color = JColorChooser.showDialog(rootPane, "Cambiar color de la letra", Color.yellow);
            Element element = doc.getCharacterElement(selectionStart);
            AttributeSet as = element.getAttributes();
            MutableAttributeSet asNew = new SimpleAttributeSet(as.copyAttributes());
            StyleConstants.setForeground(asNew, color);
            doc.setCharacterAttributes(selectionStart, jTextPane1.getSelectedText().length(), asNew, true);
        }

    }//GEN-LAST:event_jMenuItemTextColorActionPerformed

    private void jMenuItemAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAbrirActionPerformed
        // TODO add your handling code here:
        leerDocumento();

    }//GEN-LAST:event_jMenuItemAbrirActionPerformed

    private void jMenuItemCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCopyActionPerformed

        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        /* TransferHandler se utiliza para manejar la transferencia de datos a o desde elementos de Swing
        estos datos son copiados, pegados o cortados hacia o desde un portapapeles */
        TransferHandler transferHandler = jTextPane1.getTransferHandler();
        //Exporto hacia el portapapeles (función copiar)
        transferHandler.exportToClipboard(jTextPane1, clipboard, TransferHandler.COPY);

    }//GEN-LAST:event_jMenuItemCopyActionPerformed

    private void jMenuItemSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSelectAllActionPerformed
        // TODO add your handling code here:
        //Selecciono todo el jTextPane1
        jTextPane1.selectAll();
    }//GEN-LAST:event_jMenuItemSelectAllActionPerformed

    private void jMenuItemPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPasteActionPerformed
        // TODO add your handling code here:
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        TransferHandler transferHandler = jTextPane1.getTransferHandler();
        //En la función "Pegar" importo los datos del portapapeles
        transferHandler.importData(jTextPane1, clipboard.getContents(null));
    }//GEN-LAST:event_jMenuItemPasteActionPerformed

    private void jMenuItemGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemGuardarActionPerformed
        guardarDocumento();

    }//GEN-LAST:event_jMenuItemGuardarActionPerformed

    private void jMenuItemUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemUndoActionPerformed
        // TODO add your handling code here:
        jButtonUndoActionPerformed(evt);
    }//GEN-LAST:event_jMenuItemUndoActionPerformed

    private void jMenuItemRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRedoActionPerformed
        // TODO add your handling code here:
        jButtonRedoActionPerformed(evt);
    }//GEN-LAST:event_jMenuItemRedoActionPerformed

    private void jMenuItemSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSizeActionPerformed
        // TODO add your handling code here:
        jComboBoxTamanoTexto.showPopup();
    }//GEN-LAST:event_jMenuItemSizeActionPerformed

    private void jMenuItemCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCutActionPerformed
        // TODO add your handling code here:
        jMenuItemCopyActionPerformed(evt);
        jTextPane1.replaceSelection("");
    }//GEN-LAST:event_jMenuItemCutActionPerformed

    private void jMenuItemImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemImprimirActionPerformed
        // TODO add your handling code here:
        try {
            jTextPane1.setContentType(jTextPane1.getContentType());

            boolean done = jTextPane1.print();
            if (done) {
                JOptionPane.showMessageDialog(null, "El documento se ha terminado de imprimir");
            } else {
                JOptionPane.showMessageDialog(null, "Hubo un error mientras se imprimía");
            }
        } catch (Exception pex) {
            JOptionPane.showMessageDialog(null, "Hubo un error mientras se imprimía");
            pex.printStackTrace();
        }
    }//GEN-LAST:event_jMenuItemImprimirActionPerformed

    private void jMenuItemBackgroundColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemBackgroundColorActionPerformed
        // TODO add your handling code here:
        StyledDocument doc = (StyledDocument) jTextPane1.getDocument();
        int selectionEnd = jTextPane1.getSelectionEnd();
        int selectionStart = jTextPane1.getSelectionStart();
        if (selectionStart == selectionEnd) {  //Si no seleccionamos nada cambiamos el color de todo el jTextPane
            Color color = JColorChooser.showDialog(rootPane, "Cambiar color del fondo", Color.yellow);
            jTextPane1.setBackground(color);
            return;
        } else {          //Si ya hemos hecho una selección             
            Color color = JColorChooser.showDialog(rootPane, "Cambiar color del fondo de las letras", Color.yellow);
            Element element = doc.getCharacterElement(selectionStart);
            AttributeSet as = element.getAttributes();
            MutableAttributeSet asNew = new SimpleAttributeSet(as.copyAttributes());
            StyleConstants.setBackground(asNew, color);
            doc.setCharacterAttributes(selectionStart, jTextPane1.getSelectedText().length(), asNew, true);
        }
        jTextPane1.getInputMap().put(KeyStroke.getKeyStroke("control F"), "Save");
    }//GEN-LAST:event_jMenuItemBackgroundColorActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        //Si presiono la X de la ventana preguntaré al usuario si desea guardar el documento
        int confirmed = JOptionPane.showConfirmDialog(null,
                "Desea guardar el archivo?", "Salir?",
                JOptionPane.YES_NO_OPTION);
        if (confirmed == JOptionPane.YES_OPTION) {
            //Si selecciono "Sí" mostraré el cuadro de guardar archivo
            jMenuItemGuardar.doClick();
        } else if (confirmed == JOptionPane.NO_OPTION) {
            //Si selecciono "No" saldré de la aplicación con el método "dispose()"
            dispose();
        }
    }//GEN-LAST:event_formWindowClosing

    private void jPopupMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPopupMenu1MouseClicked
        // TODO add your handling code here:
        JMenuItem cut = new JMenuItem("Cut");
        JMenuItem copy = new JMenuItem("Copy");
        JMenuItem paste = new JMenuItem("Paste");
        jPopupMenu1.add(cut);
        jPopupMenu1.add(copy);
        jPopupMenu1.add(paste);
        jPopupMenu1.setVisible(true);
    }//GEN-LAST:event_jPopupMenu1MouseClicked

    private void jButtonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarActionPerformed
        guardarDocumento();
    }//GEN-LAST:event_jButtonGuardarActionPerformed

    private void jButtonImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImprimirActionPerformed
        // TODO add your handling code here:
        jMenuItemImprimirActionPerformed(evt);
    }//GEN-LAST:event_jButtonImprimirActionPerformed

    private void jButtonOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOpenActionPerformed
        // TODO add your handling code here:
        leerDocumento();
    }//GEN-LAST:event_jButtonOpenActionPerformed

    private void jButtonNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNuevoActionPerformed
        // TODO add your handling code here:
        jMenuItemNuevoActionPerformed(evt);
    }//GEN-LAST:event_jButtonNuevoActionPerformed

    private void jButtonHTMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHTMLActionPerformed
        // TODO add your handling code here:
        /*Si presiono este botón cambio el contenido del jTextPane1 a HTML (RTF a HTML) e inicializo el Editor Kit
        del HTML, mostraré un mensaje de que ha sido activado al usuario*/
        jTextPane1.setEditorKit(new HTMLEditorKit());
        System.out.println(jTextPane1.getContentType());
        jTextPane1.setContentType("text/html");
        JOptionPane.showMessageDialog(null, "Ahora está escribiendo en código HTML, las etiquitas se van añadiendo");
        addUndoManager(undo, jTextPane1);
    }//GEN-LAST:event_jButtonHTMLActionPerformed

    private void jButtonColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonColorActionPerformed
        // TODO add your handling code here:
        jMenuItemTextColorActionPerformed(evt);
    }//GEN-LAST:event_jButtonColorActionPerformed

    private void jButtonCuboColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCuboColorActionPerformed
        // TODO add your handling code here:
        jMenuItemBackgroundColorActionPerformed(evt);
    }//GEN-LAST:event_jButtonCuboColorActionPerformed

    private void jMenuItemHTMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemHTMLActionPerformed
        // TODO add your handling code here:
        jButtonHTMLActionPerformed(evt);
    }//GEN-LAST:event_jMenuItemHTMLActionPerformed

    private void jMenuItemRTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRTFActionPerformed
        // TODO add your handling code here:
        jTextPane1.setEditorKit(new RTFEditorKit());
        jTextPane1.setContentType("text/rtf");
        JOptionPane.showMessageDialog(null, "Ha vuelto al contenido RTF");
        addUndoManager(undo, jTextPane1);
    }//GEN-LAST:event_jMenuItemRTFActionPerformed

    private void jMenuItemAlignCenterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAlignCenterActionPerformed
        StyledDocument doc = jTextPane1.getStyledDocument();
        SimpleAttributeSet center = new SimpleAttributeSet();
        //Alineamos el texto para el centro del jTextPane1
        StyleConstants.setAlignment(center, StyleConstants.ALIGN_CENTER);
        doc.setParagraphAttributes(0, doc.getLength(), center, false);
        jTextPane1.getInputMap().put(KeyStroke.getKeyStroke("control T"), "Center");
    }//GEN-LAST:event_jMenuItemAlignCenterActionPerformed

    private void jMenuItemAlignIzqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAlignIzqActionPerformed
        // TODO add your handling code here:
        StyledDocument doc = jTextPane1.getStyledDocument();
        SimpleAttributeSet left = new SimpleAttributeSet();
        //Alineamos el texto para la izquierda del jTextPane1
        StyleConstants.setAlignment(left, StyleConstants.ALIGN_LEFT);
        doc.setParagraphAttributes(0, doc.getLength(), left, false);
    }//GEN-LAST:event_jMenuItemAlignIzqActionPerformed

    private void jMenuItemAlignDerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAlignDerActionPerformed
        // TODO add your handling code here:
        StyledDocument doc = jTextPane1.getStyledDocument();
        SimpleAttributeSet right = new SimpleAttributeSet();
        //Alineamos el texto para la derecha del jTextPane1
        StyleConstants.setAlignment(right, StyleConstants.ALIGN_RIGHT);
        doc.setParagraphAttributes(0, doc.getLength(), right, false);
    }//GEN-LAST:event_jMenuItemAlignDerActionPerformed

    private void jMenuItemTachaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemTachaActionPerformed
        // TODO add your handling code here:
        StyledDocument doc = jTextPane1.getStyledDocument();

        int selectionEnd = jTextPane1.getSelectionEnd();
        int selectionStart = jTextPane1.getSelectionStart();
        if (selectionStart == selectionEnd) {
            SimpleAttributeSet as = new SimpleAttributeSet();
            //Aplicamos el tachado a los caracteres
            StyleConstants.setStrikeThrough(as, true);
            doc.setParagraphAttributes(0, doc.getLength(), as, false);
            //Si le damos otra vez al item quitará el tachado
            this.jMenuItemTacha.removeActionListener(this.jMenuItemTacha.getActionListeners()[0]);
            this.jMenuItemTacha.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jMenuItem23OTRAVEZ(evt);
                }
            });
        } else {
            //Empezamos a recoger los caracteres desde el primer elemento de la selección ("selectionStart")
            Element element = doc.getCharacterElement(selectionStart);
            AttributeSet as = element.getAttributes();
            MutableAttributeSet asNew = new SimpleAttributeSet(as.copyAttributes());
            //Activamos el tachado
            StyleConstants.setStrikeThrough(asNew, true);
            //Aplicamos el tachado en toda la selección (desde el inicio hasta el final ("doc.getLength()"))
            doc.setCharacterAttributes(selectionStart, doc.getLength(), asNew, true);
            //Si vuelvo a darle quita lo aplicado a la selección
            this.jMenuItemTacha.removeActionListener(this.jMenuItemTacha.getActionListeners()[0]);
            this.jMenuItemTacha.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jMenuItem23OTRAVEZ(evt);
                }
            });
        }
    }//GEN-LAST:event_jMenuItemTachaActionPerformed

    private void jRadioButtonTachadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonTachadoActionPerformed
        // TODO add your handling code here:
        //Para no repetir código hago dos doClicks()
        if (!jRadioButtonTachado.isEnabled()) {
            jMenuItemTacha.doClick();
        } else if (jRadioButtonTachado.isEnabled()) {
            jMenuItemTacha.doClick();
        }
    }//GEN-LAST:event_jRadioButtonTachadoActionPerformed

    private void jMenuItemNegritaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNegritaActionPerformed
        // TODO add your handling code here:
        jRadioButtonNegrita.doClick();
    }//GEN-LAST:event_jMenuItemNegritaActionPerformed

    private void jMenuItemCursiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCursiActionPerformed
        // TODO add your handling code here:
        jRadioButtonCursiva.doClick();
    }//GEN-LAST:event_jMenuItemCursiActionPerformed

    private void jMenuItemAyudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAyudaActionPerformed
        // TODO add your handling code here:
        //Inicializo la ventana de "Acerca de"
        AcercaDe estancia = new AcercaDe();
        estancia.setVisible(true);
    }//GEN-LAST:event_jMenuItemAyudaActionPerformed

    private void jButtonAyudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAyudaActionPerformed
        // TODO add your handling code here:
        //Para no repetir código
        jMenuItemAyudaActionPerformed(evt);
    }//GEN-LAST:event_jButtonAyudaActionPerformed

    private void jMenuItemSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSalirActionPerformed
        // TODO add your handling code here:
        int confirmed = JOptionPane.showConfirmDialog(null,
                "Desea guardar el archivo?", "Salir?",
                JOptionPane.YES_NO_OPTION);
        if (confirmed == JOptionPane.YES_OPTION) {
            //Si selecciono "Sí" mostraré el cuadro de guardar archivo
            jMenuItemGuardar.doClick();
        } else if (confirmed == JOptionPane.NO_OPTION) {
            //Si selecciono "No" saldré de la aplicación con el método "dispose()"
            System.exit(0);
        }
    }//GEN-LAST:event_jMenuItemSalirActionPerformed

    private void jCheckBoxMenuItemPlainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemPlainActionPerformed
        // TODO add your handling code here:
        StyledDocument doc = jTextPane1.getStyledDocument();
        SimpleAttributeSet as = new SimpleAttributeSet();

        jRadioButtonNegrita.setVisible(false);
        jRadioButtonCursiva.setVisible(false);
        for (int i = -1; i < jTextPane1.getDocument().getLength(); i++) {
            Element element = doc.getCharacterElement(i);
            MutableAttributeSet asNew = new SimpleAttributeSet(as.copyAttributes());
            /* Al cambiar el tamaño de una selección tengo que respetar los estilos que estaban aplicados en cada
                carácter, de lo contrario, se pondrían todos con el último estilo aplicado */
            if (es_negrita == true) {
                StyleConstants.setBold(asNew, false);
            } else if (es_cursiva == true) {
                StyleConstants.setItalic(asNew, false);
            } else if (es_cursiva == true && es_negrita == true) {
                StyleConstants.setBold(asNew, false);
                StyleConstants.setItalic(asNew, false);
            }
            //Voy aplicando el tamaño por cada caracter
            doc.setCharacterAttributes(i, 1, asNew, true);
        }

        this.jCheckBoxMenuItemPlain.removeActionListener(this.jCheckBoxMenuItemPlain.getActionListeners()[0]);
        this.jCheckBoxMenuItemPlain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem1_otravez(evt);
            }
        });
    }//GEN-LAST:event_jCheckBoxMenuItemPlainActionPerformed

    private void jSliderTamanoTextoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderTamanoTextoStateChanged
        // TODO add your handling code here:
        tamaño_seleccionado = jSliderTamanoTexto.getValue();
        StyledDocument doc = (StyledDocument) jTextPane1.getDocument();
        int selectionEnd = jTextPane1.getSelectionEnd();
        int selectionStart = jTextPane1.getSelectionStart();
        if (selectionStart == selectionEnd) { //Si voy a escribir cambio el tamaño
            attributeSet = new SimpleAttributeSet();
            //Respeto el color que estaba aplicado ya
            StyleConstants.setForeground(attributeSet, color_seleccionado);
            StyleConstants.setFontSize(attributeSet, tamaño_seleccionado);
            jTextPane1.setCharacterAttributes(attributeSet, true);
        } else {      //Para cambiar el tamaño de lo seleccionado

            for (int i = selectionStart; i < selectionEnd; i++) {
                Element element = doc.getCharacterElement(i);
                AttributeSet as = element.getAttributes();
                MutableAttributeSet asNew = new SimpleAttributeSet(as.copyAttributes());
                //sizeSlider.getValue();    otra forma de hacerlo
                StyleConstants.setFontSize(asNew, tamaño_seleccionado);
                /* Al cambiar el tamaño de una selección tengo que respetar los estilos que estaban aplicados en cada
                carácter, de lo contrario, se pondrían todos con el último estilo aplicado */
                if (es_negrita == true) {
                    StyleConstants.setBold(asNew, true);
                } else if (es_cursiva == true) {
                    StyleConstants.setItalic(asNew, true);
                } else if (es_cursiva == true && es_negrita == true) {
                    StyleConstants.setBold(asNew, true);
                    StyleConstants.setItalic(asNew, true);
                }
                //Voy aplicando el tamaño por cada caracter
                doc.setCharacterAttributes(i, 1, asNew, true);
            }
        }

    }//GEN-LAST:event_jSliderTamanoTextoStateChanged

    private void jMenuItemExtraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExtraActionPerformed
        // TODO add your handling code here:
        transcriptor estancia = new transcriptor();
        estancia.setVisible(true);
    }//GEN-LAST:event_jMenuItemExtraActionPerformed

    private void jButtonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarActionPerformed
        // TODO add your handling code here:
        buscarTexto();

    }//GEN-LAST:event_jButtonBuscarActionPerformed

    private void jMenuItemBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemBuscarActionPerformed
        // TODO add your handling code here:
        buscarTexto();
    }//GEN-LAST:event_jMenuItemBuscarActionPerformed

    private void jMenuItemNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNuevoActionPerformed
        // TODO add your handling code here:
        jTextPane1.setText("");
        jTextPane1.setBackground(Color.white);
        jTextPane1.setForeground(Color.black);
        jTextPane1.getInputMap().put(KeyStroke.getKeyStroke("control N"), "New");
    }//GEN-LAST:event_jMenuItemNuevoActionPerformed

    private void jMenuItemPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPDFActionPerformed
        // TODO add your handling code here:
        exportarAPDF();
    }//GEN-LAST:event_jMenuItemPDFActionPerformed

    private void jMenuTemasAyudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuTemasAyudaActionPerformed
        // TODO add your handling code here:
  
        Ayuda estancia = null;
        try {
            estancia = new Ayuda();
        } catch (IOException ex) {
            Logger.getLogger(Worder.class.getName()).log(Level.SEVERE, null, ex);
        }
        estancia.setVisible(true);  

        
    }//GEN-LAST:event_jMenuTemasAyudaActionPerformed

    public void jCheckBoxMenuItem1_otravez(java.awt.event.ActionEvent evt) {
        jRadioButtonNegrita.setVisible(true);
        jRadioButtonCursiva.setVisible(true);
        this.jCheckBoxMenuItemPlain.removeActionListener(this.jCheckBoxMenuItemPlain.getActionListeners()[0]);
        this.jCheckBoxMenuItemPlain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemPlainActionPerformed(evt);
            }
        });
    }

    public void jMenuItem23OTRAVEZ(java.awt.event.ActionEvent evt) {
        //Método auxiliar si vuelvo a darle al tachado
        StyledDocument doc = jTextPane1.getStyledDocument();

        int selectionEnd = jTextPane1.getSelectionEnd();
        int selectionStart = jTextPane1.getSelectionStart();
        if (selectionStart == selectionEnd) {
            SimpleAttributeSet as = new SimpleAttributeSet();
            StyleConstants.setStrikeThrough(as, false);
            doc.setParagraphAttributes(0, doc.getLength(), as, false);
            this.jMenuItemTacha.removeActionListener(this.jMenuItemTacha.getActionListeners()[0]);
            this.jMenuItemTacha.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jMenuItemTachaActionPerformed(evt);
                }
            });
        } else {
            Element element = doc.getCharacterElement(selectionStart);
            AttributeSet as = element.getAttributes();
            MutableAttributeSet asNew = new SimpleAttributeSet(as.copyAttributes());
            StyleConstants.setStrikeThrough(asNew, false);
            doc.setCharacterAttributes(selectionStart, doc.getLength(), asNew, true);
            this.jMenuItemTacha.removeActionListener(this.jMenuItemTacha.getActionListeners()[0]);
            this.jMenuItemTacha.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jMenuItemTachaActionPerformed(evt);
                }
            });
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Worder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Worder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Worder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Worder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Worder().setVisible(true);
            }
        });
    }
    private UndoManager undo;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAyuda;
    private javax.swing.JButton jButtonBuscar;
    private javax.swing.JButton jButtonColor;
    private javax.swing.JButton jButtonCuboColor;
    private javax.swing.JButton jButtonGuardar;
    private javax.swing.JButton jButtonHTML;
    private javax.swing.JButton jButtonImprimir;
    private javax.swing.JButton jButtonNuevo;
    private javax.swing.JButton jButtonOpen;
    private javax.swing.JButton jButtonRedo;
    private javax.swing.JButton jButtonUndo;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemPlain;
    private javax.swing.JComboBox<String> jComboBoxFont;
    private javax.swing.JComboBox<String> jComboBoxTamanoTexto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuExtras;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItemAbrir;
    private javax.swing.JMenuItem jMenuItemAlignCenter;
    private javax.swing.JMenuItem jMenuItemAlignDer;
    private javax.swing.JMenuItem jMenuItemAlignIzq;
    private javax.swing.JMenuItem jMenuItemAyuda;
    private javax.swing.JMenuItem jMenuItemBackgroundColor;
    private javax.swing.JMenuItem jMenuItemBuscar;
    private javax.swing.JMenuItem jMenuItemCopy;
    private javax.swing.JMenuItem jMenuItemCursi;
    private javax.swing.JMenuItem jMenuItemCut;
    private javax.swing.JMenuItem jMenuItemExtra;
    private javax.swing.JMenuItem jMenuItemGuardar;
    private javax.swing.JMenuItem jMenuItemHTML;
    private javax.swing.JMenuItem jMenuItemImprimir;
    private javax.swing.JMenuItem jMenuItemNegrita;
    private javax.swing.JMenuItem jMenuItemNuevo;
    private javax.swing.JMenuItem jMenuItemPDF;
    private javax.swing.JMenuItem jMenuItemPaste;
    private javax.swing.JMenuItem jMenuItemRTF;
    private javax.swing.JMenuItem jMenuItemRedo;
    private javax.swing.JMenuItem jMenuItemSalir;
    private javax.swing.JMenuItem jMenuItemSelectAll;
    private javax.swing.JMenuItem jMenuItemSize;
    private javax.swing.JMenuItem jMenuItemTacha;
    private javax.swing.JMenuItem jMenuItemTextColor;
    private javax.swing.JMenuItem jMenuItemUndo;
    private javax.swing.JMenuItem jMenuTemasAyuda;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JRadioButton jRadioButtonCursiva;
    private javax.swing.JRadioButton jRadioButtonNegrita;
    private javax.swing.JRadioButton jRadioButtonTachado;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator10;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private javax.swing.JPopupMenu.Separator jSeparator8;
    private javax.swing.JPopupMenu.Separator jSeparator9;
    private javax.swing.JSlider jSliderTamanoTexto;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables

    private static class MyFileFilterTXT extends javax.swing.filechooser.FileFilter {

        public boolean accept(File f) {

            return f.isDirectory() || (f.isFile() && f.getName().toLowerCase().endsWith(".txt"));
        }

        public String getDescription() {

            return "Documentos de texto (.txt)";
        }
    }

    private static class MyFileFilterRTF extends javax.swing.filechooser.FileFilter {

        public boolean accept(File f) {

            return f.isDirectory() || (f.isFile() && f.getName().toLowerCase().endsWith(".rtf"));
        }

        public String getDescription() {

            return "Documentos de texto enriquecido (.rtf)";
        }
    }

    private static class MyFileFilterPDF extends javax.swing.filechooser.FileFilter {

        public boolean accept(File f) {

            return f.isDirectory() || (f.isFile() && f.getName().toLowerCase().endsWith(".pdf"));
        }

        public String getDescription() {

            return "Documento de formato portátil (.pdf)";
        }
    }
}
